on: [ push, pull_request ]

env:
  python-version: 3.13

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-key.outputs.value }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.python-version }}
      - id: cache-key
        run: |
          HASH=$(sha256sum poetry.lock | cut -d ' ' -f1)
          echo "value=venv-${{ runner.os }}-python-${{ env.python-version }}-$HASH" >> $GITHUB_OUTPUT
      - uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
      - run: make install
      - uses: actions/cache@v4
        with:
          path: .venv
          key: ${{ steps.cache-key.outputs.value }}

  check:
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      matrix:
        task: [ lint, types, test ]
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.python-version }}
      - uses: actions/cache@v4
        with:
          path: .venv
          key: ${{ needs.setup.outputs.cache-key }}
          fail-on-cache-miss: true
      - uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      - if: matrix.task == 'types'
        uses: actions/cache@v4
        with:
          path: .mypy_cache
          key: mypy-${{ runner.os }}-${{ env.python-version }}-${{ hashFiles('**/*.py') }}
          restore-keys: mypy-${{ runner.os }}-${{ env.python-version }}-

      - run: make ${{ matrix.task }}